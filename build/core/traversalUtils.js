'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImportedFilePaths = exports.eliminateGlobals = exports.getParentSelectorClassesMap = exports.getExtendClassesMap = exports.getComposesClassesMap = exports.getRegularClassesMap = undefined;

var _fp = require('lodash/fp');

var _fp2 = _interopRequireDefault(_fp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */
var getRegularClassesMap = exports.getRegularClassesMap = function getRegularClassesMap(ast) {
  var ruleSets = [];
  ast.traverseByType('ruleset', function (node) {
    return ruleSets.push(node);
  });

  return _fp2.default.compose(_fp2.default.reduce(function (result, key) {
    result[key] = false; // classes haven't been used
    return result;
  }, {}), _fp2.default.map('content'), _fp2.default.filter({ type: 'ident' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'class' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'selector' }), _fp2.default.flatMap('content'))(ruleSets);
};

var getComposesClassesMap = exports.getComposesClassesMap = function getComposesClassesMap(ast) {
  var declarations = [];
  ast.traverseByType('declaration', function (node) {
    return declarations.push(node);
  });

  return _fp2.default.compose(_fp2.default.reduce(function (result, key) {
    result[key] = true; // mark composed classes as true
    return result;
  }, {}), _fp2.default.flatMap(_fp2.default.compose(_fp2.default.map(_fp2.default.get('content')), _fp2.default.filter({ type: 'ident' }), _fp2.default.get('content'), _fp2.default.find({ type: 'value' }), _fp2.default.get('content'))),
  /*
     reject classes composing from other files
     eg.
     .foo {
     composes: .bar from './otherFile';
     }
   */
  _fp2.default.reject(_fp2.default.compose(_fp2.default.find({ type: 'ident', content: 'from' }), _fp2.default.get('content'), _fp2.default.find({ type: 'value' }), _fp2.default.get('content'))), _fp2.default.filter(_fp2.default.compose(_fp2.default.find({ type: 'ident', content: 'composes' }), _fp2.default.get('content'), _fp2.default.find({ type: 'property' }), _fp2.default.get('content'))))(declarations);
};

var getExtendClassesMap = exports.getExtendClassesMap = function getExtendClassesMap(ast) {
  var extendNodes = [];
  ast.traverseByType('extend', function (node) {
    return extendNodes.push(node);
  });

  return _fp2.default.compose(_fp2.default.reduce(function (result, key) {
    result[key] = true; // mark extend classes as true
    return result;
  }, {}), _fp2.default.map(_fp2.default.compose(_fp2.default.get('content'), _fp2.default.find({ type: 'ident' }), _fp2.default.get('content'), _fp2.default.find({ type: 'class' }), _fp2.default.get('content'), _fp2.default.find({ type: 'selector' }), _fp2.default.get('content'))))(extendNodes);
};

/**
 * Resolves parent selectors to their full class names.
 *
 * E.g. `.foo { &_bar {color: blue } }` to `.foo_bar`.
 */
var getParentSelectorClassesMap = exports.getParentSelectorClassesMap = function getParentSelectorClassesMap(ast) {
  var classesMap = {};

  // Recursively traverses down the tree looking for parent selector
  // extensions. Recursion is necessary as these selectors can be nested.
  var getExtensions = function getExtensions(nodeContent) {
    var blockContent = _fp2.default.compose(_fp2.default.flatMap('content'), _fp2.default.filter({ type: 'block' }))(nodeContent);

    var rulesetsContent = _fp2.default.flatMap('content', _fp2.default.concat(
    // `ruleset` children
    _fp2.default.filter({ type: 'ruleset' }, blockContent),

    // `ruleset` descendants nested in `include` nodes
    _fp2.default.compose(_fp2.default.filter({ type: 'ruleset' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'block' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'include' }))(blockContent)));

    var extensions = _fp2.default.compose(_fp2.default.map('content'), _fp2.default.filter({ type: 'ident' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'parentSelectorExtension' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'selector' }))(rulesetsContent);

    if (!extensions.length) return [];

    var nestedExtensions = getExtensions(rulesetsContent);
    var result = extensions;
    if (nestedExtensions.length) {
      nestedExtensions.forEach(function (nestedExt) {
        extensions.forEach(function (ext) {
          result.push(ext + nestedExt);
        });
      });
    }

    return result;
  };

  ast.traverseByType('ruleset', function (node) {
    var classNames = _fp2.default.compose(_fp2.default.map('content'), _fp2.default.filter({ type: 'ident' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'class' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'selector' }))(node.content);

    if (!classNames.length) return;

    var extensions = getExtensions(node.content);
    if (!extensions.length) return;

    classNames.forEach(function (className) {
      extensions.forEach(function (ext) {
        classesMap[className + ext] = false;
      });

      // Ignore the base class if it only exists for nesting parent selectors
      var hasDeclarations = _fp2.default.compose(_fp2.default.filter({ type: 'declaration' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'block' }))(node.content).length > 0;
      if (!hasDeclarations) classesMap[className] = true;
    });
  });

  return classesMap;
};

/*
   mutates ast by removing instances of :global
 */
var eliminateGlobals = exports.eliminateGlobals = function eliminateGlobals(ast) {
  ast.traverse(function (node, index, parent) {
    if (node.type === 'ruleset') {
      if (_fp2.default.compose(_fp2.default.negate(_fp2.default.isEmpty), _fp2.default.find({ type: 'ident', content: 'global' }), _fp2.default.get('content'), _fp2.default.find({ type: 'pseudoClass' }), _fp2.default.get('content'), _fp2.default.find({ type: 'selector' }), _fp2.default.get('content'))(node)) {
        parent.removeChild(index);
      }
    }
  });
};

var getImportedFilePaths = exports.getImportedFilePaths = function getImportedFilePaths(ast, parentFilePath) {
  var filePaths = [];

  ast.traverse(function (node, index, parent) {
    if (node.type === 'atrule') {
      var filePath = node.content.find(function (node) {
        return node.type === 'string';
      }).content.replace(/^('|")/g, '').replace(/('|")$/, '');

      if (!filePath || filePath.startsWith('~')) return;

      filePaths.push(_path2.default.resolve(_path2.default.dirname(parentFilePath), filePath));
    }
  });

  return filePaths;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,